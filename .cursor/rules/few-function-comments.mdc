---
alwaysApply: true
---

# Function Comment Guidelines

## Avoid Unnecessary Function Comments

Do NOT add comments for functions that are self-explanatory. The function name and parameters should clearly indicate what the function does.

### ❌ Avoid these unnecessary comments:

```python
# This function returns the user's name
def get_user_name():
    return user.name

# This function calculates the total price
def calculate_total(price, tax):
    return price + (price * tax)

# This function saves the data to the database
def save_to_database(data):
    database.save(data)
```

### ✅ Good - No comments needed:

```python
def get_user_name():
    return user.name

def calculate_total(price, tax):
    return price + (price * tax)

def save_to_database(data):
    database.save(data)
```

### ✅ Only add comments when they provide value:

```python
def calculate_compound_interest(principal, rate, time):
    # Uses the formula: A = P(1 + r/n)^(nt) where n=12 for monthly compounding
    return principal * (1 + rate/12) ** (12 * time)

def process_audio_metadata(file_path):
    # Handles edge cases where ID3v2 tags may be corrupted
    # and falls back to ID3v1 if necessary
    try:
        return extract_id3v2_metadata(file_path)
    except CorruptedTagError:
        return extract_id3v1_metadata(file_path)
```

### ❌ Avoid unnecessary test function comments:

```python
# This test checks if the user name is returned correctly
def test_get_user_name():
    assert get_user_name() == "John"

# This test verifies that the total is calculated properly
def test_calculate_total():
    assert calculate_total(100, 0.1) == 110
```

### ✅ Good test functions - no comments needed:

```python
def test_get_user_name():
    assert get_user_name() == "John"

def test_calculate_total():
    assert calculate_total(100, 0.1) == 110

def test_audio_metadata_handles_corrupted_tags():
    # Test the fallback behavior when ID3v2 tags are corrupted
    result = process_audio_metadata("corrupted_file.mp3")
    assert result is not None
```

## When to Add Comments

Only add function comments when:

1. The function implements complex business logic that isn't obvious
2. There are important edge cases or assumptions to document
3. The function has non-obvious side effects
4. The function uses algorithms or formulas that need explanation
5. There are performance considerations or limitations to note

## When NOT to Add Comments

Do NOT add comments for:

- Simple getter/setter functions
- Functions with descriptive names that clearly indicate their purpose
- Standard CRUD operations
- Functions that are self-documenting through their implementation
